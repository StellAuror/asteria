## Libraries
```{r}
  library(tidyverse)
  library(shiny)
  library(bslib)
  library(htmltools)
  library(lorem)
  library(echarts4r)
  library(reactable)
  library(reactablefmtr)
  library(bsicons)
  library(plotly)
  library(glue)
  # library(config) - better to use namespace:: due to the conflicting funs
  library(mongolite)

  config <- config::get(config = "default")
  mongo_uri <- glue(
    "mongodb+srv://{config$mongoLogin}:{config$mongoPass}@{config$mongoHost}.mongodb.net/{config$mongoDB}"
  )
```

## Data
```{r}
config <- config::get(config = "default")
gdf <- mongo(collection = config$mongoCollGym, url = mongo_uri)$find() |>
  mutate(Date = as.Date(Date, format = "%Y-%m-%d"))


```

```{r}

# mongo(collection = config$mongoCollGym, url = mongo_uri)$find()
# mongo(collection = config$mongoCollGym, url = mongo_uri)$insert(training_data)
# mongo(collection = config$mongoCollGym, url = mongo_uri)$drop()

# x <- mongo(collection = config$mongoCollGym, url = mongo_uri)$find()[1,]
# mongo(collection = config$mongoCollUserGym, url = mongo_uri)$insert(x)
# mongo(collection = config$mongoCollUserGym, url = mongo_uri)$drop()
```


![](images/Zrzut ekranu 2023-07-16 011543-02.png)


## Chart I - Sunflower overview
```{r}
total_load <- sum(gdf$Load)
power <- total_load / total_reps
durability <- mean(gdf$Rep)
intensity <- mean(gdf$Weight)

# 6. Calculate Balance (Distribution of exercises across muscle groups)
balance <- gdf |> 
  group_by(MuscleGroup) |> 
  summarise(ExerciseCount = n()) |> 
  mutate(Percentage = ExerciseCount / sum(ExerciseCount) * 100) 


balance |> 
  e_charts(MuscleGroup) |> 
  e_polar() |> 
  e_angle_axis(MuscleGroup) |> # angle = x
  e_radius_axis() |> 
  e_bar(Percentage, coord_system = "polar") |>
  e_scatter(Percentage, coord_system = "polar")
```

```{r}
gdf %>% group_by(Date = paste0(year(Date), "-", week(Date))) %>%
  summarise(Load = mean(Load)) %>% as_tibble %>%
  plot_ly() %>%
  add_bars(
    x = ~factor(Date, levels = factor(paste0(rep(2021:2022, each = 52),"-", 1:52))),
    y = ~Load
  )

gdf %>% group_by(Date = paste0(year(Date), "-", week(Date))) %>%
  summarise(Load = mean(Load)) %>% as_tibble %>%
  e_charts(
    Date
  ) %>%
  e_bar(
    Load
  )


gdf %>% group_by(Date) %>%
  summarise(Load = mean(Load)) %>%
  e_charts(
    Date
  ) %>%
  e_bar(
    Load
  ) %>%
  e_legend(show = F)

gdf %>% 
  select(Date, Weight) %>%
  mutate(Date = factor(paste0(year(Date), month(Date)))) %>%
  group_by(Date) %>%
  summarise(
    max = max(Weight, na.rm = T),
    min = min(Weight, na.rm = T)
  ) %>%
  ggplot() +
  geom_segment(aes(
    x = Date, xend = Date,
    y = min, yend = max
  ), size = 2, color = "#dddddd") +
  geom_point(aes(
    x = Date, y = min
  ), size = 4.5, color = "#ff6565") +
  geom_point(aes(
    x = Date, y = max
  ), size = 4.5, color = "#4868f9") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 90)
  ) -> p


plotly::ggplotly(p)
```
  
```{r}
library(echarts4r)
my_scale_small <- function(x) scales::rescale(x, to = c(10, 20))
my_scale_large <- function(x) scales::rescale(x, to = c(30, 30))

  gdf %>%
    filter(
      Name == "Squats"
    ) %>%
    arrange(ID) %>%
    group_by(Date) %>%
    mutate(Set = n()) %>% ungroup %>%
    group_by(Date) %>%
    summarise(
      Set = mean(Set),
      Weight = mean(Weight),
      Load = mean(Load),
      Rep = mean(Rep)
    ) %>% 
    mutate(
      row = row_number(),
      new_record = if_else(row_number() == round(max(row) / 2, 0), 50, NA),
      new_record_size = if_else(row_number() == round(max(row) / 2, 0), 10, 1),
      normalized_weight = ((max(Weight) - Weight) / (max(Weight) - min(Weight)))
    ) %>% 
    e_charts(Date) %>%
    e_line(Weight, color = '#4361ee', lineStyle = list(width = 3)) %>%
    e_scatter(Weight, normalized_weight, scale = my_scale_small) %>%
    e_scatter(new_record, size = new_record_size, scale = my_scale_large) %>%
    e_theme_custom(
      '{
      "backgroundColor": ["#ffffff"],
      "color": ["#4361ee", "#fe3939"],
      "legend":{"textStyle": {"color": "#676971"}}
      }'
    ) %>%
  e_bar(Load, y_index = 1,  color = '#bbbbbb') %>%
  e_tooltip()
```

```{r}

gdf[1:10,] %>%
group_by_all() %>%
summarise(Set = n()) %>%
ungroup() %>%
mutate(Load = Weight * Rep * Set) %>%
reactable(
  defaultSorted = 'ID',
  defaultPageSize = 8,
  paginationType = 'jump',
  columns = list(
    ID = colDef(
      minWidth = 40,
      cell = pill_buttons(
        data = .,
        colors  = '#4361ee',
        opacity = 0.8
      )
    ),
    Name = colDef(maxWidth = 100),
    Load = colDef(
      name = 'Total load',
      align = 'left',
      minWidth = 250,
      cell = data_bars(
        data = .,
        fill_color = '#4361ee',
        background = "#cccccc",
        #number_fmt = scales::percent,
        text_position = 'outside-base',
        max_value = max(.$Load),
        text_color = '#4361ee',
        round_edges = TRUE,
        icon = "fire-flame-curved",
        icon_color = "#2d41a1"
      )
    ),
    Weight = colDef(
      name = 'Weight lifted',
      align = 'left',
      minWidth = 250,
      cell = data_bars(
        data = .,
        fill_color = '#4361ee',
        background = "#cccccc",
        #number_fmt = scales::percent,
        text_position = 'outside-base',
        max_value = max(.$Weight),
        text_color = '#4361ee',
        round_edges = TRUE,
        icon = "fire-flame-curved",
        icon_color = "#2d41a1"
      )
    ),
    Date = colDef(
      minWidth = 125,
      cell = pill_buttons(
        colors  = '#4361ee',
        data = .,
        opacity = 0.8
      )
    ),
    Rep = colDef(
      name = "Rep Done",
      maxWidth = 150, 
      align = 'center',
      cell = icon_assign(
        data = .,
        fill_color = '#4361ee',
        empty_color = '#0c0223',
        empty_opacity = 0.8,
        icon_size = 12,
        icon = 'dumbbell'
      )
    ),
    Set = colDef(
      name = "Rep Done",
      maxWidth = 150, 
      align = 'center',
      cell = icon_assign(
        data = .,
        fill_color = '#4361ee',
        empty_color = '#0c0223',
        empty_opacity = 0.8,
        icon_size = 12,
        icon = 'dumbbell'
      )
    )
  )
) 
```
```{r}
Sys.setlocale("LC_TIME", "English")
wdOrder <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun") %>% rev
#install.packages("ggchicklet",                    # Install & load ggchicklet package
#                 repos = "https://cinc.rud.is")



plot <- gdf %>%
  select(Date) %>%
  mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
  group_by(Date) %>%
  summarise(n = n()) %>%
  rbind(
    data.frame(
      Date = 
        seq(
        as.Date(paste0(min(year(gdf$Date)),"-01-01"), format = "%Y-%m-%d"), 
        as.Date(paste0(max(year(gdf$Date)),"-12-31"), format = "%Y-%m-%d"),
        1
      ),
      n = 0
    )
  ) %>% 
  group_by(Date) %>%
  summarise(n = sum(n, na.rm = T)) %>%
  mutate(
    m = month(Date),
    w = week(Date),
    wd = weekdays(Date, T) %>% factor(., levels = wdOrder, ordered = T),
    y = year(Date),
    n = if_else(n == 0, NA, n)
  ) %>%
  ggplot(
    aes(
      x = w,
      y = wd,
      fill = n
    )
  ) +
  geom_tile(color = "white", size = .8, show.legend = F) +
  facet_wrap(~y, ncol = 1) +
  theme_minimal() +
  scale_fill_gradient(low = "#0c0223", high = "#4361ee", na.value = "#dadada") + 
  scale_x_continuous(
    expand = c(0, 0),
    breaks = seq(1, 52, length = 12),
    labels = c(
      "Jan", "Feb", "Mar", "Apr", "May", "Jun",
      "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
    )
  ) +
  theme(
  axis.title = element_blank(),
  axis.ticks = element_blank(), 
  axis.text.y = element_text(size = 7),
  panel.grid = element_blank(),
  aspect.ratio = 1/7,
  legend.key.width = unit(1, "cm"),
  strip.text = element_text(hjust = 0.00, face = "bold", size = 12)
  )
  


p <- gdf |> 
  group_by(Date) |>
  summarise(n = n()) |>
  dplyr::mutate(Y = format(Date, "%Y")) |> # get year from date
  group_by(Y) |> 
  e_charts(Date) |> 
  e_calendar(range = "2021",top = "40") |> 
  e_calendar(range = "2022",top = "260") |> 
  e_heatmap(n, coord_system = "calendar") |> 
  e_visual_map(max = 30) |> 
  e_title("Calendar", "Heatmap") |>
  e_tooltip("item") 

ui <- fluidPage(
  echarts4rOutput("p")
)

server <- function(input, output, session) {
  output$p <- renderEcharts4r({
    p
  })
  
   observeEvent(input$p_clicked_data, {
     print(input$p_clicked_data)
   })
}

shinyApp(ui, server)

```

```{r}
max <- list(
  name = "Max",
  type = "max"
)

min <- list(
  name = "Min",
  type = "min"
)

avg <- list(
  type = "average",
  name = "AVG"
)

gdf |>
  group_by_all() |>
  summarise(
    Set = n(),
    Total = Rep * Set
  ) |>
  ungroup() |>
  group_by(Year) |>
  e_chart(Load) |>
  e_scatter(
    Weight, size = Total, 
    itemStyle = list(opacity = 0.6)
  ) |>
  e_tooltip() |>
  e_color(c("#5662f6", "#382365")) |>
  e_mark_point(data = max) |> 
  e_mark_point(data = min) |> 
  e_mark_point(data = avg)
```



```{r}
ggplot(training_data, aes(x = Rep)) +
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black") +
  labs(title = "Distribution of Reps", x = "Reps", y = "Frequency") +
  theme_minimal()

training_data %>%
  group_by(Name) %>%
  summarise(TotalLoad = sum(Load)) %>%
  ggplot(aes(x = reorder(Name, TotalLoad), y = TotalLoad, fill = Name)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(title = "Total Load by Exercise", x = "Exercise", y = "Total Load (kg)") +
  theme_minimal()

training_data %>%
  group_by(Type) %>%
  summarise(TotalLoad = sum(Load)) %>%
  ggplot(aes(x = reorder(Type, TotalLoad), y = TotalLoad, fill = Type)) +
  geom_bar(stat = "identity") +
  coord_flip() +
  labs(title = "Total Load by Exercise Type", x = "Exercise Type", y = "Total Load (kg)") +
  theme_minimal()


```
```{r}
# Extract month and week from Date
training_data <- training_data %>%
  mutate(Month = month(Date, label = TRUE),
         Week = week(Date))

# Monthly total load
monthly_load <- training_data %>%
  group_by(Month) %>%
  summarise(TotalLoad = sum(Load), .groups = 'drop') %>%
  arrange(Month)

# Weekly total load
weekly_load <- training_data %>%
  group_by(Week) %>%
  summarise(TotalLoad = sum(Load), .groups = 'drop') %>%
  arrange(Week)

# Plot seasonal trends
ggplot(monthly_load, aes(x = Month, y = TotalLoad)) +
  geom_bar(stat = "identity") +
  labs(title = "Monthly Total Load", x = "Month", y = "Total Load (kg)") +
  theme_minimal()

ggplot(weekly_load, aes(x = Week, y = TotalLoad)) +
  geom_bar(stat = "identity") +
  labs(title = "Weekly Total Load", x = "Week", y = "Total Load (kg)") +
  theme_minimal()


```
```{r}
gdf |>
  e_charts() |> 
  e_histogram(serie = Rep, name = "histogram", legend = F) |> 
  e_tooltip(trigger = "axis") 

gdf |>
  e_charts() |> 
  e_histogram(serie = Load, name = "histogram", legend = F) |> 
  e_tooltip(trigger = "axis") 

gdf |>
  e_charts() |> 
  e_histogram(serie = Weight, name = "histogram", legend = F) |> 
  e_tooltip(trigger = "axis")

gdf |>
  filter(Name == "Squats") |>
  mutate(DateNumeric = as.numeric(Date - min(Date))) |>
  arrange(DateNumeric) |>
  e_charts(Date) |>
  e_scatter(Load, size = Weight, name = "Training Load", color = "#5662f6", itemStyle = list(opacity = 0.9), symbol_size = 4) |>
  e_loess(Load ~ DateNumeric, name = "Progress Curve", lineStyle = list(width = 5), itemStyle =  list(opacity = 0)) |>
  e_theme("inspired")


```


```{r}


```

