## Libraries
```{r}
  library(tidyverse)
  library(shiny)
  library(bslib)
  library(htmltools)
  library(lorem)
  library(echarts4r)
  library(reactable)
  library(reactablefmtr)
  library(bsicons)
  library(glue)
  # library(config) - better to use namespace:: due to the conflicting funs
  library(mongolite)

  config <- config::get(config = "default")
  mongo_uri <- glue(
    "mongodb+srv://{config$mongoLogin}:{config$mongoPass}@{config$mongoHost}.mongodb.net/{config$mongoDB}"
  )
```


## Data
mongodb datasource
```{r}
config <- config::get(config = "default")
gdf <- mongo(collection = config$mongoCollGym, url = mongo_uri)$find() 
```

![](images/Zrzut ekranu 2023-07-16 011543-02.png)


## Chart I - Sunflower overview
```{r}
# Power
sf_data <-
  gdf %>%
  group_by_all() %>%
  summarise(Set = n()) %>%
  ungroup() %>%
  group_by(year(Date)) %>%
  summarise(
    power = mean(Load), # average load
    strength = max(Load), # max laod
    durability = sum(Set * Rep), # total reps
    intensivity = sum(Rep) / sum(Set), # proportion reps to sets
    variety = max(summarise(group_by(gdf, Date), n = n())[[2]]), # variety of excercises
    musclnity = sum(Load) # total load
  ) %>% sapply(., function(x) round(x, 2))

sf_data <- sf_data[1,-1] / sf_data[2,-1] 
sf_data[length(sf_data) + 1] <- sf_data[1]
names(sf_data) <- c(names(sf_data)[-length(sf_data)], names(sf_data)[1])


plot_ly(
    type = 'scatterpolar',
    fill = 'toself',
    fillcolor = 'rgba(168, 216, 234, 0.8)',
    marker = list(
      color = '#698087',
      width = 3
    ),
    line = list(
      color = '#698087',
      width = 3
    )
  ) %>%
  add_trace(
    r = sf_data,
    theta = names(sf_data),
    name = 'Group A'
  )  %>%
  layout(
    polar = list(
      radialaxis = list(
        visible = T,
        range = c(0,1.2)
      )
    )
  ) %>% hide_legend()
```

```{r}
gdf %>% group_by(Date = paste0(year(Date), "-", week(Date))) %>%
  summarise(Load = mean(Load)) %>% as_tibble %>%
  plot_ly() %>%
  add_bars(
    x = ~factor(Date, levels = factor(paste0(rep(2021:2022, each = 52),"-", 1:52))),
    y = ~Load
  )

gdf %>% group_by(Date = paste0(year(Date), "-", week(Date))) %>%
  summarise(Load = mean(Load)) %>% as_tibble %>%
  e_charts(
    Date
  ) %>%
  e_bar(
    Load
  )


gdf %>% group_by(Date) %>%
  summarise(Load = mean(Load)) %>%
  e_charts(
    Date
  ) %>%
  e_bar(
    Load
  ) %>%
  e_legend(show = F)

gdf %>% 
  select(Date, Weight) %>%
  group_by(Date) %>%
  summarise(
    max = max(Weight, na.rm = T),
    min = min(Weight, na.rm = T)
  ) %>%
  ggplot() +
  geom_segment(aes(
    x = Date, xend = Date,
    y = min, yend = max
  ), size = 3, color = "gray") +
  geom_point(aes(
    x = Date, y = min
  ), size = 3.5, color = "#ff6565") +
  geom_point(aes(
    x = Date, y = max
  ), size = 3.5, color = "#4868f9") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 90)
  ) -> p


plotly::ggplotly(p)
```
  
```{r}
library(echarts4r)
my_scale_small <- function(x) scales::rescale(x, to = c(10, 20))
my_scale_large <- function(x) scales::rescale(x, to = c(30, 30))

  gdf %>%
    filter(
      Name == "Wyciskanie",
      Weight <= quantile(Weight, .75) + IQR(Weight) * .5,
      Weight >= quantile(Weight, .25) - IQR(Weight) * .5
    ) %>%
    arrange(ID) %>%
    mutate(
      row = row_number(),
      new_record = if_else(row_number() == round(max(row) / 2, 0), 2100, NA),
      new_record_size = if_else(row_number() == round(max(row) / 2, 0), 10, 1),
      normalized_weight = log((max(Weight) - Weight) / (max(Weight) - min(Weight)))
    ) %>%
    e_charts(Date) %>%
    e_line(Load, color = '#4361ee', lineStyle = list(width = 3)) %>%
    e_scatter(Load, normalized_weight, scale = my_scale_small) %>%
    e_scatter(new_record, size = new_record_size, scale = my_scale_large) %>%
    e_theme_custom(
      '{
      "backgroundColor": ["#ffffff"],
      "color": ["#4361ee", "#fe3939"],
      "legend":{"textStyle": {"color": "#676971"}}
      }'
    ) %>%
    e_tooltip() %>%
    e_bar(Weight, y_index = 1,  color = '#bbbbbb')
```
```{r}

gdf %>%
group_by_all() %>%
summarise(Set = n()) %>%
ungroup() %>%
mutate(Load = Weight * Rep * Set) %>%
reactable(
  defaultSorted = 'ID',
  defaultPageSize = 8,
  paginationType = 'jump',
  columns = list(
    ID = colDef(
      minWidth = 40,
      cell = pill_buttons(
        data = .,
        colors  = '#4361ee',
        opacity = 0.8
      )
    ),
    Name = colDef(maxWidth = 100),
    Load = colDef(
      name = 'Total load',
      align = 'left',
      minWidth = 250,
      cell = data_bars(
        data = .,
        fill_color = '#4361ee',
        background = "#cccccc",
        #number_fmt = scales::percent,
        text_position = 'outside-base',
        max_value = max(.$Load),
        text_color = '#4361ee',
        round_edges = TRUE,
        icon = "fire-flame-curved",
        icon_color = "#2d41a1"
      )
    ),
    Weight = colDef(
      name = 'Weight lifted',
      align = 'left',
      minWidth = 250,
      cell = data_bars(
        data = .,
        fill_color = '#4361ee',
        background = "#cccccc",
        #number_fmt = scales::percent,
        text_position = 'outside-base',
        max_value = max(.$Weight),
        text_color = '#4361ee',
        round_edges = TRUE,
        icon = "fire-flame-curved",
        icon_color = "#2d41a1"
      )
    ),
    Date = colDef(
      minWidth = 125,
      cell = pill_buttons(
        colors  = '#4361ee',
        data = .,
        opacity = 0.8
      )
    ),
    Rep = colDef(
      name = "Rep Done",
      maxWidth = 150, 
      align = 'center',
      cell = icon_assign(
        data = .,
        fill_color = '#4361ee',
        empty_color = '#0c0223',
        empty_opacity = 0.8,
        icon_size = 12,
        icon = 'dumbbell'
      )
    ),
    Set = colDef(
      name = "Rep Done",
      maxWidth = 150, 
      align = 'center',
      cell = icon_assign(
        data = .,
        fill_color = '#4361ee',
        empty_color = '#0c0223',
        empty_opacity = 0.8,
        icon_size = 12,
        icon = 'dumbbell'
      )
    )
  )
) 
```
```{r}
Sys.setlocale("LC_TIME", "English")
wdOrder <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun") %>% rev
#install.packages("ggchicklet",                    # Install & load ggchicklet package
#                 repos = "https://cinc.rud.is")



gdf %>%
  select(Date) %>%
  mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
  group_by(Date) %>%
  summarise(n = n()) %>%
  rbind(
    data.frame(
      Date = 
        seq(
        as.Date(paste0(min(year(gdf$Date)),"-01-01"), format = "%Y-%m-%d"), 
        as.Date(paste0(max(year(gdf$Date)),"-12-31"), format = "%Y-%m-%d"),
        1
      ),
      n = 0
    )
  ) %>% 
  group_by(Date) %>%
  summarise(n = sum(n, na.rm = T)) %>%
  mutate(
    m = month(Date),
    w = week(Date),
    wd = weekdays(Date, T) %>% factor(., levels = wdOrder, ordered = T),
    y = year(Date),
    n = if_else(n == 0, NA, n)
  ) %>%
  ggplot(
    aes(
      x = w,
      y = wd,
      fill = n
    )
  ) +
  geom_tile(color = "white", size = .8, show.legend = F) +
  facet_wrap(~y, ncol = 1) +
  theme_minimal() +
  scale_fill_gradient(low = "#0c0223", high = "#4361ee", na.value = "#dadada") + 
  scale_x_continuous(
    expand = c(0, 0),
    breaks = seq(1, 52, length = 12),
    labels = c(
      "Jan", "Feb", "Mar", "Apr", "May", "Jun",
      "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
    )
  ) +
  theme(
  axis.title = element_blank(),
  axis.ticks = element_blank(), 
  axis.text.y = element_text(size = 7),
  panel.grid = element_blank(),
  aspect.ratio = 1/7,
  legend.key.width = unit(1, "cm"),
  strip.text = element_text(hjust = 0.00, face = "bold", size = 12)
  )
  

```

```{r}
gdf %>%
  ggplot(aes(
    x = Weight,
    y = Load,
    size = Rep,
    color = Type
  )) +
  geom_point()

gdf %>%
  group_by_all() %>%
  summarise(
    Set = n(),
    Total = Rep * Set
  ) %>%
  ungroup() %>%
  group_by(Year) %>%
  e_chart(Weight) %>%
  e_scatter(
    Load, 
    size = Total
  ) %>%
  e_tooltip()
```



