## Libraries
```{r}
library(readr)
library(tidyverse)
library(plotly)
```


## Data
mongodb datasource
```{r}
config <- config::get(config = "default")
gdf <- mongo(collection = config$mongoCollGym, url = mongo_uri)$find() 
```

![](images/Zrzut ekranu 2023-07-16 011543-02.png)


## Chart I - Sunflower overview
```{r}
# Power
sf_data <-
  gdf %>% group_by(year(date)) %>%
  summarise(
    power = mean(load), # average load
    strength = max(load), # max laod
    durability = sum(set * rep), # total reps
    intensivity = sum(rep) / sum(set), # proportion reps to sets
    variety = max(summarise(group_by(gdf, date), n = n())[[2]]), # variety of excercises
    musclnity = sum(load) # total load
  ) %>% sapply(., function(x) round(x, 2))

sf_data <- sf_data[1,-1] / sf_data[2,-1] 


plot_ly(
    type = 'scatterpolar',
    fill = 'toself'
  ) %>%
  add_trace(
    r = sf_data,
    theta = names(sf_data),
    name = 'Group A'
  )  %>%
  layout(
    polar = list(
      radialaxis = list(
        visible = T,
        range = c(0,1.2)
      )
    )
  ) %>% hide_legend()
```

```{r}
gdf %>% group_by(date = paste0(year(date), "-", month(date))) %>%
  summarise(load = mean(load)) %>% as_tibble %>%
  plot_ly() %>%
  add_bars(
    x = ~factor(date, levels = factor(paste0(rep(2021:2022, each = 12),"-", 1:12))),
    y = ~load
  )

gdf %>% group_by(date = paste0(year(date), "-", week(date))) %>%
  summarise(load = mean(load)) %>% as_tibble %>%
  plot_ly() %>%
  add_bars(
    x = ~factor(date, levels = factor(paste0(rep(2021:2022, each = 52),"-", 1:52))),
    y = ~load
  )
```
  
```{r}
library(echarts4r)
my_scale_small <- function(x) scales::rescale(x, to = c(10, 20))
my_scale_large <- function(x) scales::rescale(x, to = c(30, 30))

  gdf %>%
    filter(
      Name == "Wyciskanie",
      Weight <= quantile(Weight, .75) + IQR(Weight) * .5,
      Weight >= quantile(Weight, .25) - IQR(Weight) * .5
    ) %>%
    arrange(ID) %>%
    mutate(
      row = row_number(),
      new_record = if_else(row_number() == round(max(row) / 2, 0), 2100, NA),
      new_record_size = if_else(row_number() == round(max(row) / 2, 0), 10, 1),
      normalized_weight = log((max(Weight) - Weight) / (max(Weight) - min(Weight)))
    ) %>%
    e_charts(Date) %>%
    e_line(Load, color = '#4361ee', lineStyle = list(width = 3)) %>%
    e_scatter(Load, normalized_weight, scale = my_scale_small) %>%
    e_scatter(new_record, size = new_record_size, scale = my_scale_large) %>%
    e_theme_custom(
      '{
      "backgroundColor": ["#ffffff"],
      "color": ["#4361ee", "#fe3939"],
      "legend":{"textStyle": {"color": "#676971"}}
      }'
    ) %>%
    e_tooltip() %>%
    e_bar(Weight, y_index = 1,  color = '#bbbbbb')
```
```{r}

  gdf %>%
  filter(
    name == "Wyciskanie",
    weight <= quantile(weight, .75) + IQR(weight) * .5,
    weight >= quantile(weight, .25) - IQR(weight) * .5
  ) %>%
  mutate(
    x = sample(1:5, n(), replace = T)
    ) %>%
  select("date", "type", "name", "set", "rep", "x", "id") %>%
  reactable(
  theme = reactableTheme(
    color = "hsl(233, 9%, 87%)",
    backgroundColor = "#212121",
    borderColor = "hsl(233, 9%, 22%)",
    stripedColor = "hsl(233, 12%, 22%)",
    highlightColor = "hsl(233, 12%, 24%)",
    inputStyle = list(backgroundColor = "hsl(233, 9%, 25%)"),
    selectStyle = list(backgroundColor = "hsl(233, 9%, 25%)"),
    pageButtonHoverStyle = list(backgroundColor = "hsl(233, 9%, 25%)"),
    pageButtonActiveStyle = list(backgroundColor = "hsl(233, 9%, 28%)")
  ),
  defaultSorted = 'id',
  defaultPageSize = 5,
  paginationType = 'jump',
  columns = list(
    id = colDef(show = F),
    type = colDef(maxWidth = 80),
    name = colDef(maxWidth = 100),
    rep = colDef(
      name = 'Number of reps',
      align = 'left',
      minWidth = 250,
      cell = data_bars(
        data = .,
        fill_color = '#f72585',
        background = "#333333",
        #number_fmt = scales::percent,
        text_position = 'outside-end',
        max_value = max(.$rep),
        text_color = '#f72585',
        round_edges = TRUE,
        icon = "fire-flame-curved",
        icon_color = "#aa195b"
      )
    ),
    set = colDef(
      name = 'Number of sets',
      align = 'left',
      minWidth = 250,
      cell = data_bars(
        data = .,
        fill_color = '#4361ee',
        background = "#333333",
        #number_fmt = scales::percent,
        text_position = 'outside-end',
        max_value = max(.$set),
        text_color = '#4361ee',
        round_edges = TRUE,
        icon = "fire-flame-curved",
        icon_color = "#2d41a1"
      )
    ),
  date = colDef(
    minWidth = 125,
    cell = pill_buttons(
      data = .,
      opacity = 0.8
    )
  ),
  x = colDef(
    maxWidth = 70, 
    align = 'center',
      cell = icon_assign(
        data = .,
        fill_color = '#7209b7',
        empty_color = '#0c0223',
        empty_opacity = 0.8,
        icon_size = 12,
        icon = 'dumbbell'
        )
    )
  )
) -> table
```
```{r}
    config <- config::get(config = "default")
    mongo_uri <- glue(
      "mongodb+srv://{config$mongoLogin}:{config$mongoPass}@{config$mongoHost}.mongodb.net/{config$mongoDB}"
    )
    mongo(collection = config$mongoCollUserGym, url = mongo_uri)$insert(
      tibble(
        ID = 0,
        Name = "",
        Weight = 0,
        Rep = 0,
        Date = as.Date(0),
        Year = 0,
        Load = 0,
        Type = ""
      )
    ) 
    
    mongo(collection = config$mongoCollUserGym, url = mongo_uri)$find()
    mongo(collection = config$mongoCollUserGym, url = mongo_uri)$drop()
    df
```




